// Code generated by go-bindata.
// sources:
// import/Procfile
// import/import.py
// import/manifest.yml
// export/.DS_Store
// export/Procfile
// export/export.py
// export/manifest.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _importProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\xc8\xcc\x2d\xc8\x2f\x2a\xd1\x2b\xa8\x04\x04\x00\x00\xff\xff\x27\x80\x25\x86\x16\x00\x00\x00")

func importProcfileBytes() ([]byte, error) {
	return bindataRead(
		_importProcfile,
		"import/Procfile",
	)
}

func importProcfile() (*asset, error) {
	bytes, err := importProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/Procfile", size: 22, mode: os.FileMode(420), modTime: time.Unix(1478029721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importImportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\x2a\x07\xca\xb5\x2d\xa7\xf5\x65\xb1\x80\x0e\xae\xa3\xee\x06\x0d\x36\x81\xa5\xdd\xc5\x22\x08\x04\x5a\xa2\x6d\x36\x32\xa9\x70\x28\x7b\x0d\x14\xfd\xed\x05\x3f\x14\x2b\xb5\xb3\x2d\xd0\x5e\xea\x83\x21\x71\xde\x3c\xce\x3c\x72\x1e\x74\xf1\x66\xd2\xa2\x9a\x2c\xb9\x98\x30\xb1\x83\xe6\xa0\x37\x52\x4c\x83\x0b\x80\xf1\x0f\x63\x28\x65\xc5\xc5\xfa\x1d\xb4\x7a\x35\x7e\x6b\x56\x02\xbe\x6d\xa4\xd2\x80\x07\xec\x1e\x7f\x43\x29\xba\x67\xf9\xbc\xba\xd1\xba\x89\x91\xa9\x1d\x53\xcf\x39\xb2\x7c\x64\xda\xaf\x05\x15\x5b\xc1\x9a\xe9\xd9\x97\xec\x67\x2e\x6e\x64\x49\x35\x97\x22\x1a\xbc\x0b\x00\x00\xf8\x0a\x24\xc6\x0d\xd5\x9b\x98\xe3\x8a\xd7\x2c\x0a\x27\x1b\xb9\x65\x93\x5d\x49\x1b\x5b\x2c\xdd\x63\xe8\xc1\xe6\xa7\x98\x6e\x95\x80\x73\x28\x8b\x61\xf5\xf7\x29\x69\xf3\x4f\x69\xfb\xc8\xa0\x8f\x09\x5d\x4f\x2b\x2e\xaa\x02\xa7\xc5\xb2\x35\xdd\x16\xa5\x62\x15\x76\x6d\xe1\x14\x12\xab\x57\x5c\x4b\x5a\x61\x24\x31\x66\x62\xc7\x95\x14\xf1\x9a\xe9\x88\x64\xf9\xed\x22\x2d\xe6\x8b\xf4\x2a\xfd\x98\x5f\xcf\x6e\x32\x32\x18\x74\x7a\x10\xc5\xd6\x5c\x0a\x02\x5c\x00\x4e\x4f\x4a\xc4\xe9\x3d\xa1\x65\xc9\x10\x8b\x47\x76\x28\x78\x45\x1e\x46\x76\x11\x59\xa9\x98\x2e\x8e\xb1\x2e\xe0\x0a\xec\xde\x3c\xfb\x43\xf0\x1f\x71\x12\xe2\xe4\x50\x0c\xb5\x54\xac\xd8\x1e\xf0\xa9\x2e\x56\x4a\x6e\x0b\x9c\x46\x56\x95\x11\x18\x41\xbd\x34\x8e\x6b\x04\x8e\x7a\x04\x8e\x69\x04\xae\x2e\x48\x5e\xd1\xd5\xe5\xee\x11\x92\x73\x97\xa9\xd3\xce\x93\xbc\x49\x80\x90\xa3\x72\xa5\xdc\x6e\xa9\xa8\x20\x01\x32\xfb\x92\x15\x57\xe9\x2f\xb3\x4f\x37\x79\xb1\x48\xdf\x5f\xdf\x7e\x4c\x42\x32\x74\x69\x43\x12\x82\x89\xcf\xe6\xf3\x34\xcb\x8a\x5f\xd3\xaf\xc5\xf5\x95\x09\xbb\x92\xbb\x70\x96\xce\x17\x69\xde\x43\x19\x88\xeb\xc6\x40\x08\x0c\x6d\x9d\x43\x20\xe6\x1a\x94\x8d\x39\xc4\xc9\x84\x0c\x5d\x3f\x43\x20\x93\x6a\x19\xe3\x53\x0d\x63\xf8\x1d\xcc\x05\xb3\x8a\xc1\xb8\xb5\xa9\xb6\xdd\x7b\xd2\x22\x53\x82\x6e\x19\x79\xb0\x44\xe3\xa6\x17\x6b\x28\xe2\x5e\xaa\x8a\x3c\xd8\xd0\xa6\x9f\xb7\x91\xa8\x7d\x4e\x6f\xb5\x5a\x16\x8e\xec\x59\x12\x89\x31\x1e\x50\xb3\x6d\xe4\xc5\x19\xf8\xe9\x41\xf6\xaa\x6e\xff\x52\x17\x2f\xcb\xff\x4c\x15\x7b\xb7\xb9\x40\x4d\xeb\xba\xa0\x7b\x2c\xca\x9a\x77\x53\x7e\x84\x87\x74\x8f\x65\xcd\xc7\xcb\x56\x54\x35\x9b\xbc\x7c\xf3\xd9\x30\x5e\xc2\x1f\x47\xef\x71\xc4\xd6\x30\xaf\xa8\xa6\x2f\x0d\xd1\x9b\xc5\x3d\xf9\x3c\x9f\xdd\x15\x59\xba\xf8\x7c\x3d\x4f\x33\xf2\x70\x3c\x1b\x33\x51\xdf\xf7\x98\x97\xa9\xde\x5f\xac\x39\x31\xb5\xe3\x25\x33\xa3\x64\x58\xee\x09\xdd\xe3\x58\x55\xd8\x13\x62\x25\x55\x07\xb3\x36\xe4\x33\x8e\xdb\xfb\x52\x7d\xe0\x9e\xf8\x53\x49\x12\xf8\x6b\x19\xf9\x6c\xf1\x3e\xcd\xbb\x42\xc8\xe0\x25\x87\xbd\x66\xe6\x38\x20\x39\x92\x99\x05\x26\x34\xa7\x75\xbf\xa6\xee\xd7\xd4\x54\xf4\xd1\xe6\xfd\x0c\x8c\xaf\x20\xb4\x77\x28\x34\x1d\x18\xd0\xe9\xce\x9d\xe3\xe2\xd4\xba\xed\x79\x97\xce\xbf\xde\x9d\x2d\xfb\xb9\x1e\xc5\x85\x8e\xc2\x95\x6c\x45\x05\x4b\xfb\x8f\x53\x6f\x6b\x31\xec\x79\x5d\x83\x56\x07\xd0\xd2\x9f\x36\x18\x6f\x3c\x42\xc2\xc1\xab\xcc\x7f\x6f\xa9\x67\x53\x9d\xa9\x9f\x84\x5e\xce\xf6\x99\x0e\x3e\x09\xba\xac\x99\x29\xb4\x62\x25\xaf\x18\x6c\xe4\xde\xbc\x2d\x69\xf9\xd8\x36\x4e\x42\x08\x61\xe8\x4e\x60\x08\x61\x0c\xe9\x37\xae\xb9\x58\xc7\xaf\x34\x81\x07\x8c\xd9\x37\xae\xa3\x1f\x5d\xfc\x74\xa3\x8e\xdd\x13\x3c\x27\xfc\x34\x08\x4e\x86\x2e\xe8\x4f\x4b\x70\x01\x73\xc5\xa8\x66\x40\xc1\x7d\x69\xd8\x13\x54\x15\x53\x8e\x78\x2f\xcc\x58\x80\xde\x30\x30\x1f\x01\x18\x07\x77\xb7\x8b\x1c\x12\x30\x25\x48\x34\x27\xcc\xc4\x2e\x22\x66\x95\x8c\x80\xbc\xbd\xbc\xbc\x34\x53\x12\x7c\xa0\x66\x6a\x15\x24\xfd\x4f\x9b\x38\xe3\xdb\xa6\x66\x1f\xf2\xfc\x6e\xc1\x9e\x5a\x86\xda\xc3\x82\xc0\xa0\x8c\x47\xf6\xbf\x7a\xe2\x7c\x7e\x97\xd9\xa7\x28\x0a\xc3\x11\x98\x4d\x06\x23\xf0\x39\x83\x20\xf0\x4a\xd8\x4b\x2c\xd6\x40\x35\x98\xd6\x3a\xa4\xe3\x74\x5b\x17\x2b\xa9\x98\x21\x1a\x04\x7f\x06\x00\x00\xff\xff\xff\x4a\x85\x71\xc3\x09\x00\x00")

func importImportPyBytes() ([]byte, error) {
	return bindataRead(
		_importImportPy,
		"import/import.py",
	)
}

func importImportPy() (*asset, error) {
	bytes, err := importImportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/import.py", size: 2499, mode: os.FileMode(420), modTime: time.Unix(1478126661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcb\xcd\x4a\xc3\x40\x14\xc5\xf1\xfd\x3c\xc5\x79\x81\x69\x50\xd1\xc5\xec\x4a\x1c\xa4\x50\xb5\x24\x41\x70\x15\x26\x93\xd1\x5c\xed\x7c\x90\xb9\x29\xe6\xed\x25\x6d\xad\xdd\xfe\xcf\xef\x98\x94\xf6\x64\x0d\x53\x0c\x59\x09\x89\x6e\xa2\x7d\x9f\x8c\xfd\x56\x18\x98\x53\x56\x45\xf1\x49\x3c\x4c\xdd\xca\x46\x5f\x7c\xd9\x6c\x23\x33\x11\x15\xf6\x43\x5e\xac\xec\x3b\xe9\x7e\x52\x1c\x59\x00\x36\x7a\x6f\x42\xaf\x90\x66\x1e\x62\xb8\x03\xf9\x65\x59\xa5\x59\x00\x14\x32\x9b\x60\x5d\x56\xb8\x11\x80\x77\x3e\x8e\xb3\xc2\xed\xfd\xc3\xb3\x00\x82\xf1\x4e\x9d\xbd\xec\xbb\xa5\x44\x39\xc6\x89\x9d\x02\x8f\x93\x13\x40\x76\xe3\x81\x96\xbf\x00\x24\x2a\xbd\xdb\xae\x4b\xdd\x36\xeb\xea\x49\x37\x02\x70\xe1\xb0\x2c\xc0\xa9\xb4\xb5\xae\xde\x36\xa5\x56\x7f\xf2\x94\xcf\xf5\x08\xeb\xe6\xb5\xd2\x6d\xf3\xbe\xfb\x47\xc7\xb4\x94\x2b\x50\x56\xfa\x51\xbf\x34\x9b\xf5\xb6\xbe\xb8\xab\x26\x7e\x03\x00\x00\xff\xff\x2a\x56\xd5\xe8\x48\x01\x00\x00")

func importManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_importManifestYml,
		"import/manifest.yml",
	)
}

func importManifestYml() (*asset, error) {
	bytes, err := importManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/manifest.yml", size: 328, mode: os.FileMode(420), modTime: time.Unix(1478123245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func exportDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_exportDs_store,
		"export/.DS_Store",
	)
}

func exportDs_store() (*asset, error) {
	bytes, err := exportDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1478107017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\x48\xad\x28\xc8\x2f\x2a\xd1\x2b\xa8\xe4\x02\x04\x00\x00\xff\xff\xc8\x71\x30\x6b\x17\x00\x00\x00")

func exportProcfileBytes() ([]byte, error) {
	return bindataRead(
		_exportProcfile,
		"export/Procfile",
	)
}

func exportProcfile() (*asset, error) {
	bytes, err := exportProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/Procfile", size: 23, mode: os.FileMode(420), modTime: time.Unix(1478106260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportExportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x41\x6f\xe3\x36\x13\xbd\xeb\x57\xcc\x2a\x07\xca\x9f\x6c\x39\x5f\x75\x59\x04\xd0\x21\xf5\xaa\xdd\xa0\x8b\x26\xb0\x9c\x5d\x14\x86\x21\xd0\x12\x6d\xb3\x91\x49\x85\x43\xc5\x31\x50\xf4\xb7\x17\x24\x25\x4b\x49\x9c\xb6\x87\x1e\xd6\x07\x43\xe4\xbc\x79\x9c\x79\x9a\x19\xea\xe2\xc3\xb4\x41\x35\x5d\x73\x31\x65\xe2\x09\xea\xa3\xde\x49\x11\x7b\x17\x00\x93\xff\x4d\xa0\x90\x25\x17\xdb\x2b\x68\xf4\x66\xf2\xd1\xec\x78\x7c\x5f\x4b\xa5\x01\x8f\xd8\x3d\xfe\x8e\x52\x74\xcf\x12\xfb\xa7\xa8\xa6\x7a\xd7\x2d\x77\x5a\xd7\x11\x32\xf5\xc4\xd4\x89\x42\x16\x0f\x4c\xb7\x7b\x5e\xc9\x36\xb0\x65\xfa\xfa\x5b\xf6\x23\x17\x5f\x64\x41\x35\x97\x22\x18\x5d\x79\x00\x00\x7c\xd3\xf1\x45\x1c\x37\xbc\x62\x81\x3f\xdd\xc9\x3d\x9b\x3e\x15\xb4\xb6\xb1\xd3\x03\xfa\x2d\xd8\xfc\x14\xd3\x8d\x12\x70\x0e\x65\x31\xac\xfa\x7b\x4a\x5a\xff\x5b\xda\x21\xd2\x1b\x62\x7c\xcf\x25\xb5\xa6\xc5\x43\x53\xe7\xfb\x23\x3e\x56\xb9\x96\x39\xc6\x41\xa1\x58\x89\x63\x30\xfe\x2d\x39\x2d\x0a\x86\x38\x06\x64\x85\x62\x7a\x0c\xeb\xc6\x68\x33\x06\xc5\xb6\x5c\x0a\x48\x60\xc3\x45\x99\x63\x9c\x3b\x43\x6e\x19\x02\x4b\xe0\xfc\x0f\x08\xc9\x39\xfd\x3a\xf9\x5a\xa2\x0f\x09\x10\xd2\xe7\x53\xc8\xfd\x9e\x8a\x12\x12\x20\x26\x07\x1b\x63\xd9\xec\x6b\x98\x34\x40\x20\x04\x7b\xcc\x92\x34\xc8\x94\xa0\x7b\x46\x56\x10\x02\x81\x49\x3d\xb0\xd5\x14\xf1\x20\x55\x49\x56\xd6\xb4\x1b\xfa\xed\x24\xea\xd6\x67\xb0\x5b\xae\xf3\x01\xd9\x1f\x70\xfd\x2d\xcb\x3f\xa5\x3f\x5d\xdf\x7f\x59\xe4\xf3\xf4\xe7\x9b\xdb\x5f\x13\x9f\x84\x2e\xe0\x90\xf8\xd6\x7e\x3d\x9b\xa5\x59\x96\xff\x92\xfe\x96\xdf\x7c\x32\x66\x27\x58\x67\xce\xd2\xd9\x3c\x5d\x0c\x50\x06\xe2\xb4\x34\x10\x12\x5a\x81\x42\x02\x18\x43\x51\xc3\x04\x30\xbe\x9a\x4e\x49\xe8\xd4\x0c\x81\x4c\xcb\x75\x84\x8f\x15\x39\x29\x23\x31\xc2\x23\x6a\xb6\x0f\x5a\x8d\x46\x6d\xdd\x20\xfb\x0e\xe5\xfb\x1e\xe4\xb1\xc5\xfe\x7e\x99\x3a\xd5\x30\x86\xc4\xd6\xfd\x92\x60\x4c\x56\xcb\xcb\xd5\x92\x18\x10\x13\x9a\xd3\x0a\xc9\xaa\xab\x57\xe2\xde\x3f\x01\x2e\x4c\x34\xaf\x3b\x10\xe3\x25\x71\x39\xe6\x0f\xec\x98\xf3\x92\xac\xc6\x76\xd3\x65\x95\xf7\xb6\xce\xe0\x22\xea\x56\x2d\xfb\xca\xfb\x8f\x38\x09\x19\x36\xfb\xcb\xb1\xc5\xc4\x13\x57\x52\x2c\xc9\xd7\xd9\xf5\x5d\x9e\xa5\xf3\xaf\x37\xb3\x34\x23\xab\x3e\x29\x23\x08\x24\x76\x90\x46\x95\xa4\x25\x06\xbd\x5b\xb4\x65\x3a\x78\xe5\x3a\x1a\x9d\x5c\xcd\xf8\xe4\x05\xc3\x93\xac\xf4\x80\x13\x55\x76\x4a\x9a\xdf\x46\xaa\x0e\x66\xd5\x6c\x3d\xfa\xe3\xdb\x50\x5b\xc3\x92\xb4\xe5\x95\x24\xf0\x3a\x8c\xec\xf6\x7e\x3e\x4b\xbb\x40\xc8\xe8\x25\x87\x6d\x09\xf3\xc6\x21\xe9\xc9\xde\xbe\xdd\xe1\xaf\xae\xa8\x18\xa2\xcd\xfa\x0c\x8c\x6f\xc0\xb7\xdd\xe5\x9b\x0c\x0c\xe8\xed\xc9\x5d\xe1\x60\x6c\x8b\xc6\xa8\x71\x1e\x64\xcf\x55\x5c\xe8\xc0\xdf\xc8\x46\x94\xb0\xb6\xff\x18\xb7\x53\x37\x82\x03\xaf\x2a\xd0\xea\x08\x5a\x02\x7b\xb6\x97\x95\x96\x3d\xc0\x1f\xbd\xcb\xfb\x0f\xc3\xfe\xac\x9f\x2b\xbf\x37\xa6\x97\xa3\xe6\x4c\xf0\xf7\x82\xae\x2b\x66\x22\x2b\x59\xc1\x4b\x06\x3b\x79\x30\x2b\x17\x83\x53\x09\x7c\x08\x9d\xc8\x21\xf8\x11\xa4\xcf\x5c\x73\xb1\x8d\xde\xc9\x00\x8f\x18\xb1\x67\xae\x83\xff\x3b\xfb\xdb\x83\x3a\xf6\x96\xe0\xe4\xf0\x83\x5b\x5f\x38\x8f\xd3\x4c\x30\x2d\xc1\x05\x6a\x5a\x55\x39\x3d\x60\x5e\x54\xbc\xeb\x8d\x7e\x82\xf8\xf4\x80\x45\xc5\x27\xeb\x46\x94\x15\x9b\xbe\x5c\xb5\xde\x30\x59\xc3\x9f\xfd\x8d\xec\xbd\x21\xf5\xba\xce\xf3\x2e\x60\xa6\x18\xd5\x0c\x28\xb8\x6f\x0b\x53\x0d\x52\x95\x4c\xb9\x0c\x0e\xc2\xb4\x18\xe8\x1d\x03\x73\xed\x63\xe4\xdd\xdd\xce\x17\x90\x80\x89\x5c\xa2\x29\x74\x26\x9e\x02\x62\x76\xc9\x18\xc8\xc7\xcb\xcb\x4b\xd3\x71\xde\x67\x6a\x22\x52\x90\x0c\x3f\x66\xa2\x8c\xef\xeb\x8a\x7d\x5e\x2c\xee\xe6\xec\xb1\x61\xa8\x5b\x98\xe7\x19\x94\xb9\x1b\x86\xdf\x39\xd1\x62\x76\x97\xd9\xa7\x20\xf0\xfd\x31\x98\x43\x46\x63\x68\x7d\x46\x9e\xd7\x4a\x6e\x1b\x42\x6c\x81\x6a\x30\xe5\xd7\x21\x1d\xa7\x3b\x3a\xdf\x48\xc5\x0c\xd1\xc8\xfb\x2b\x00\x00\xff\xff\x0e\x83\x3c\x63\xc4\x09\x00\x00")

func exportExportPyBytes() ([]byte, error) {
	return bindataRead(
		_exportExportPy,
		"export/export.py",
	)
}

func exportExportPy() (*asset, error) {
	bytes, err := exportExportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/export.py", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1478123915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcb\xc1\x4a\xc4\x30\x14\x85\xe1\x7d\x9e\xe2\xbc\x40\xa6\xa8\xe8\xe2\xee\xa4\x74\x21\x28\x23\x1d\x75\x3b\xa4\x69\xb4\x57\x27\xb9\x21\xb9\x1d\xec\xdb\x4b\xe9\x28\xb8\xfd\xcf\x77\x5c\xce\x27\xf6\x4e\x59\x52\x25\x63\x31\xcc\x7c\x1a\xb3\xf3\x5f\x84\x49\x35\x57\x6a\x9a\x0f\xd6\x69\x1e\x76\x5e\x62\xf3\xe9\xab\x17\x55\x66\x6e\xfc\xbb\xfd\xb3\x76\x1c\x6c\xf8\xce\x52\xd4\x00\x5e\x62\x74\x69\x24\xe4\x45\x27\x49\x37\xd8\x96\x5d\x5e\x0c\xc0\xa9\xaa\x4b\x3e\x54\xc2\x95\x01\x62\x88\x52\x16\xc2\xf5\xed\xdd\x93\x01\x92\x8b\x81\x2e\xde\x8e\xc3\x5a\xc4\x16\x99\x35\x10\xb4\xcc\xc1\x00\x35\x94\x33\xaf\x7f\x03\x58\xf4\xdd\xf3\xe3\x7d\xdb\x1d\x0f\xfb\xd7\xbe\xed\xfe\xa7\x97\x7d\xbf\x96\x90\xce\xab\x05\x36\x73\x3c\x74\xfd\xdb\x43\xdb\xd1\x2f\xdc\xf2\xa5\x9a\x9f\x00\x00\x00\xff\xff\xaf\x08\xf4\xd3\x0f\x01\x00\x00")

func exportManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_exportManifestYml,
		"export/manifest.yml",
	)
}

func exportManifestYml() (*asset, error) {
	bytes, err := exportManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/manifest.yml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1478111046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"import/Procfile": importProcfile,
	"import/import.py": importImportPy,
	"import/manifest.yml": importManifestYml,
	"export/.DS_Store": exportDs_store,
	"export/Procfile": exportProcfile,
	"export/export.py": exportExportPy,
	"export/manifest.yml": exportManifestYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"export": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{exportDs_store, map[string]*bintree{}},
		"Procfile": &bintree{exportProcfile, map[string]*bintree{}},
		"export.py": &bintree{exportExportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{exportManifestYml, map[string]*bintree{}},
	}},
	"import": &bintree{nil, map[string]*bintree{
		"Procfile": &bintree{importProcfile, map[string]*bintree{}},
		"import.py": &bintree{importImportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{importManifestYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

