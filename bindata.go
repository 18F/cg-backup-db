// Code generated by go-bindata.
// sources:
// import/import.py
// import/manifest.yml
// export/export.py
// export/manifest.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _importImportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x51\x8f\xa3\x46\x0c\x7e\xe7\x57\x58\xdc\xc3\x80\x92\xb0\xdb\xe6\xa5\x3a\x89\x87\x55\x2e\xea\x9d\xfa\xd0\x55\x92\x5e\x55\x45\x11\x9a\x80\x49\xa6\x0b\x33\xec\x78\xb2\xb9\x48\xf7\xe3\x2b\xcf\x40\x42\x6f\xf7\xda\x97\xaa\x3c\x20\xb0\x3f\x7f\xf6\x67\xec\x41\xb5\x9d\xb1\x0e\xe8\x42\x51\xff\xf8\x27\x19\x3d\x3c\x9b\xab\xf5\xe8\x5c\x97\x11\xda\x17\xb4\x83\x89\x4c\xf9\x84\xae\xb7\x45\x15\xd6\x50\x2b\x5d\x15\x34\x2f\xf6\x27\xf6\x14\xa5\xc5\x8a\x92\x97\x52\x76\xe9\xfb\x08\x00\x80\xe6\x90\x03\xbf\x6f\x05\xcd\xc5\x6e\x7b\xbf\xdb\x0a\x06\xa1\x76\x4a\x36\x24\x76\x1e\x65\xd1\x9d\xac\x06\x9a\x6f\x85\x2c\x4b\x24\x2a\x9e\xf0\x52\xa8\x4a\xec\xa6\xde\x48\x58\x5a\x74\xc5\xcd\x37\x38\x42\x5a\xb1\x0b\xc5\x58\x24\x67\x2c\x16\xed\x85\x9e\x9b\xa2\xb6\xa6\x2d\x68\x9e\xf8\x9a\xa6\x30\x2a\x2a\xf0\x4c\x21\xd0\x4e\x21\xb0\x40\xfe\x0f\x6a\x7c\x5c\x69\xda\x56\xea\x0a\x72\x10\x0f\xbf\xaf\x8b\x87\xc5\x62\xb9\x5e\x17\xbf\x2c\xff\x28\x3e\x7d\xc8\x63\x31\x09\xbc\x13\x11\x03\xbb\xd7\xcb\xc5\x6a\xb9\x19\xa1\x18\x12\x52\x32\x64\xaf\xf4\xdd\xc1\xd4\x73\x0b\x07\x74\x30\xdb\x83\x98\x84\xb4\x13\x10\x30\x7b\x82\x6a\x9f\xd1\x73\x03\x5f\x3d\xd0\x2b\x82\xd9\x09\x04\x4c\xc0\x97\xb5\x15\x27\x42\xab\x65\x8b\x62\x07\x3e\xa4\x1b\xf9\x3a\x49\x74\x36\xb6\x12\x3b\xef\x3a\x8e\xe3\x8e\x86\x5c\x1f\x33\xb2\x56\xfb\x22\x90\x79\xa5\xef\x46\x52\xaf\xf9\xab\x53\xdb\xfd\x3f\x35\x78\xc7\x57\xf8\x6f\x9a\x2c\xcf\xc4\x63\x58\x76\x30\x03\x9a\xbf\xbf\xbb\xbb\x36\x5a\xdc\x85\x26\x0b\xaf\xd9\x50\x46\x17\x72\xd8\x26\xbd\xf8\x34\x4c\x55\x98\xfd\x0f\xd2\xc9\xa4\x9f\x1f\x55\x33\x18\xf5\x8b\xb2\x46\x6f\xc5\xe7\xc5\xc3\x63\xb1\x5e\xae\x3e\x7f\x5a\x2c\xd7\x62\x17\x30\x7c\xf1\xe4\x40\xee\xd7\x2b\x6b\x8c\xac\x28\xb9\x85\x65\x07\x74\xc9\x37\xa1\x69\x7a\x0d\xe5\x1d\x53\x25\xd2\x75\x7b\xe4\x99\x66\xb6\x1a\x16\x86\xaf\xda\xd8\x01\x06\x4a\x5f\x23\x6e\xe9\xfb\x52\x7b\xc7\x56\xf4\xbd\xcd\x73\xf8\xb6\x8c\xcd\xc3\xea\xe7\xe5\x66\x28\x44\xa4\x7f\xe7\xf0\xa3\xcf\x5f\x08\xf2\x1b\xd9\xeb\x25\x1e\x5f\x5d\x23\xf5\x18\xcd\xef\x6f\xc0\x54\x0d\xb1\x1f\xad\x98\x15\x30\xe8\x75\xe6\x1e\xc7\xc7\x07\x83\xb8\x1b\x6f\x83\x7c\x5e\xab\xb4\x4b\xe2\xda\x9c\x74\x05\x7b\x7f\xa7\x79\xbf\xdf\x19\x9c\x55\xd3\x80\xb3\x17\x70\xa6\xff\xaa\xc0\x87\xc4\x0d\x12\xa7\xdf\x65\xfe\xf7\xb3\xe5\xcd\xd0\x70\xb2\xbd\x72\x61\x43\xf8\xb6\x8a\x5e\xc1\x6f\x5a\xee\x1b\xe4\x42\x2b\x2c\x55\x85\x70\x34\x67\x7e\xdb\xcb\xf2\xe9\xd4\x85\x56\x41\x0c\x93\xd0\xe9\x09\xc4\x19\x2c\xbf\x28\xa7\xf4\x21\xfb\x8e\x08\xba\x50\x86\x5f\x94\x4b\x7e\x08\xfe\xd7\x89\x06\xf6\x9e\xe0\x1a\xf0\x63\x1a\x45\xe3\x25\x88\xde\xc1\xc2\xa2\x74\x08\x12\xc2\xbf\x80\x3f\x8c\xb1\x15\xda\xc0\x73\xd6\x3c\xed\xe0\x8e\x08\xb5\x6a\x90\xb2\xe8\xf1\xd7\xd5\x06\x72\xe0\x8c\x86\x78\xe6\x50\xbf\x24\x82\xad\x62\x0a\xe2\xa7\xfb\xfb\x7b\x1e\xfe\xe8\xa3\xd4\x55\x83\x16\xf2\xf1\xcf\x27\x5b\xab\xb6\x6b\xf0\xe3\x66\xf3\xb8\xc2\xe7\x13\x92\xeb\x61\x51\xc4\x28\x3e\xa3\xc6\xff\xa5\x6c\xb3\x78\x5c\xfb\xa7\x24\x89\xe3\x29\x70\x92\x74\x0a\x7d\x4c\x1a\x45\xbd\x70\x3f\x9b\xfa\x00\xd2\x01\x4b\x1b\x90\x81\x33\xa4\x2e\x6a\x63\x91\x89\xd2\xe8\xaf\x00\x00\x00\xff\xff\x53\xd2\xb7\x2c\x35\x07\x00\x00")

func importImportPyBytes() ([]byte, error) {
	return bindataRead(
		_importImportPy,
		"import/import.py",
	)
}

func importImportPy() (*asset, error) {
	bytes, err := importImportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/import.py", size: 1845, mode: os.FileMode(420), modTime: time.Unix(1477926527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcb\xd1\x4a\xc3\x30\x14\xc6\xf1\xfb\x3c\xc5\xf7\x02\x59\x51\xd1\x8b\x73\x37\x46\x10\x41\x51\xba\xe2\xed\x48\xd3\x68\x8f\x2e\x39\xa1\x39\x1d\xf6\xed\xa5\x6c\x0a\xbb\xfd\x7f\xbf\xcf\x97\x72\xe4\xe0\x95\x25\x57\x32\x16\xfd\xcc\xc7\xa1\xf8\xf0\x4d\x18\x55\x4b\xa5\xa6\xf9\x64\x1d\xe7\x7e\x13\x24\x35\x5f\xa1\x06\x51\x65\xe6\x26\x7c\xd8\x7f\x6b\x87\xde\xc6\x9f\x22\x93\x1a\x20\x48\x4a\x3e\x0f\x84\xb2\xe8\x28\xf9\x0e\x9c\xd6\x65\x53\x16\x03\x70\xae\xea\x73\x88\x95\x70\x63\x80\x14\x93\x4c\x0b\xe1\xf6\xfe\xe1\xc5\x00\xd9\xa7\x48\x17\x6f\x87\x7e\x2d\x62\x27\x99\x35\x12\x74\x9a\xa3\x01\x6a\x9c\x4e\xbc\xfe\x0d\x60\xd1\xba\xb7\xe7\xed\xce\x1d\xba\x6d\xfb\xe8\xba\xab\xb4\xef\x5e\x5b\x67\x80\x98\x4f\xab\x05\xce\xe6\xb0\x77\xed\xfb\xd3\xce\xd1\x1f\x3c\xe7\x4b\x35\xbf\x01\x00\x00\xff\xff\xa9\x32\xac\xfd\x0f\x01\x00\x00")

func importManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_importManifestYml,
		"import/manifest.yml",
	)
}

func importManifestYml() (*asset, error) {
	bytes, err := importManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/manifest.yml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1477926831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportExportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x51\x8f\xe2\xc6\x0f\x7f\xcf\xa7\xf0\x3f\x3c\x4c\xf2\x07\xc2\xb6\x79\x39\xad\x94\x4a\x2b\x8a\x74\xa7\x3e\xdc\x8a\x70\x57\x55\x08\x45\x21\x71\x60\xba\x61\x26\x3b\x9e\xc0\x22\xf5\xc3\x57\x33\x93\x40\xee\xd8\xd5\xad\xaa\x3e\x35\x0f\x28\xb1\x7f\xb6\x7f\xf6\xd8\x1e\x46\xff\x9b\xb5\xa4\x66\x5b\x2e\x66\x28\x8e\xd0\x9c\xf5\x5e\x8a\xd8\x1b\x01\x4c\xff\x3f\x85\x42\x96\x5c\xec\xee\xa1\xd5\xd5\xf4\x83\x91\x78\xfc\xd0\x48\xa5\x81\xce\xd4\xbf\xfe\x49\x52\xf4\xef\xf2\x22\xdd\x6b\xdd\x44\x84\xea\x88\xea\x62\x23\x8b\x27\xd4\x9d\xcc\x2b\xb1\x82\x6d\x5e\x3c\xb5\x4d\x76\x38\xd3\x73\x1d\x14\x0a\x4b\x0a\xef\x3d\x00\x80\x42\x1e\x0e\xb9\x28\x21\x01\x66\x98\x59\x40\xd9\x1e\x1a\x98\xb6\xc0\x60\x0c\x16\xbb\x66\x2d\xa1\x12\xf9\x01\xd9\x06\xc6\xc0\x60\xda\x0c\x74\x4d\x4e\x74\x92\xaa\xec\x75\xfb\xa1\xe1\x5e\x92\xee\x14\x03\x69\xb9\xcd\x06\xde\x7e\x81\x72\x1b\xd1\x73\xcd\x2c\x23\x49\x11\x9d\x49\xe3\x21\xe8\xb8\x85\xb7\x29\x64\x5a\x66\x14\xbb\x44\x26\x70\x2c\xf2\xa6\x4b\x27\x2f\x0a\x24\x9a\x00\x61\xa1\x50\x4f\x60\xdb\x9a\x4a\x40\x02\x15\x17\x65\x46\x71\xe6\x04\x99\xb5\x0c\xac\xe1\xbf\x5f\x86\x7f\x56\x85\xbf\xe0\xe1\xf7\x34\x7b\x98\xcf\x17\x69\x9a\xfd\xb6\xf8\x23\xfb\xf4\x6b\xe2\xb3\xb1\xcb\x68\xcc\x7c\xab\x4e\x17\xf3\xe5\x62\x35\x40\x19\x88\x4b\xd6\x40\x0c\xf7\x9d\xac\x62\x05\x4d\xab\x61\xba\x05\x36\x76\x09\x5b\x4a\x4f\xdf\xd4\x79\xf4\x1f\xca\x39\x3f\x11\x50\x0c\x45\x03\x53\xa0\xf8\x7e\x36\xbb\xe4\xcd\x66\xef\xe9\xad\xb7\xbb\xc3\xb5\x15\xc5\x90\xd8\x36\x5b\x33\x8a\xd9\x66\x7d\xb7\x59\x33\x03\x42\xa1\x79\x5e\x13\xdb\x58\x94\x42\xdd\x2a\x01\x14\xaf\x99\xcb\x20\x7b\xc2\x73\xc6\x4b\xb6\x99\x58\xa1\xe3\x9c\x5d\x75\xbd\xc2\x85\x65\x9b\x61\xa3\x07\x5d\x68\x5e\x19\xd6\x28\x8e\x5c\x49\xb1\x66\x5f\xe7\x0f\x8f\x59\xba\x58\x7e\xfd\x34\x5f\xa4\x6c\xe3\x30\xe6\x31\xec\x20\xb1\x3b\x22\xaa\x65\x5e\x52\x70\x35\x8b\x76\xa8\x83\xef\x4c\xc3\xf0\x62\x6a\x16\x05\x2f\x90\x2e\x39\xe6\x27\x9a\xaa\xb2\x4f\xcb\x3c\x95\x54\x3d\x0c\xb8\xb8\x58\x5c\xc3\x77\x54\x3b\xc5\x9a\x75\x87\x9c\x24\xf0\x3d\x8d\xf4\xf3\x97\xe5\x7c\xd1\x13\x61\xe1\xb7\x3e\xec\x30\x9a\xf2\x43\x72\x75\x76\x5b\xea\xe1\xd3\xd4\xb9\x18\xa2\xcd\xf7\x2b\x30\x5e\x81\x6f\x7b\xdc\x37\x19\x18\xd0\x6d\xe4\x0e\x67\x0e\xd9\x80\x4c\x35\x5e\x07\xd9\xb8\x8a\x0b\x1d\xf8\x95\x6c\x45\x09\x5b\xfb\x4b\x71\xb7\x71\x22\x38\xf1\xba\x06\xad\xce\xa0\x25\xe0\x8b\x5d\xcb\x5a\x5e\x01\x7e\xf8\xa6\xdf\x1f\x2c\xba\x57\xed\xb0\x26\x7c\x27\x53\x21\x7f\x4c\x33\x6f\x1a\xa8\x78\x8d\x6e\x58\xde\xc9\xb5\xbb\x57\x5e\xc5\xba\xd1\xb8\x51\xbd\x4d\xbb\xa3\xfc\x45\xe4\xdb\x1a\x0d\xa5\x12\x0b\x5e\x22\xec\xe5\xc9\x7c\xb9\xb8\xee\x14\xc1\x87\xb1\x6b\x82\x31\xf8\x11\x2c\x5e\xb8\xe6\x62\x17\xbd\xc1\x9a\xce\x14\xe1\x0b\xd7\xc1\x4f\x4e\x7f\x1b\xa8\xf7\xde\x39\xb8\x18\xfc\xec\xbe\x47\xce\xe2\xba\x40\xfa\x79\xf5\x46\x30\x57\x98\x6b\x84\x1c\xdc\xdd\x6b\x7a\x48\xaa\x12\x95\xf3\x7b\x12\x66\x30\x41\xef\xd1\x15\x37\xf2\x1e\x3f\x2f\x57\x90\x80\xf1\x27\xc9\x8c\x07\x8a\x63\xc0\x8c\x94\x4d\x80\x7d\xb8\xbb\xbb\x33\x73\xea\x7d\xcc\x45\x59\xa3\x82\x64\x78\xd9\x47\x29\x3f\x34\x35\x7e\x5c\xad\x1e\x97\xf8\xdc\x22\xe9\x0e\xe6\x79\x06\x65\xf6\xfa\xf0\x7f\x40\xb4\x9a\x3f\xa6\xf6\x2d\x08\x7c\x7f\x02\x26\x48\x38\x81\xce\x26\xf4\xbc\xae\x10\x76\x8c\xc4\x0e\x72\x0d\xa6\x1b\x7a\xa4\xf3\xe9\x42\x67\x95\x54\x68\x1c\x85\xde\xdf\x01\x00\x00\xff\xff\xaa\x19\x29\x82\xd5\x08\x00\x00")

func exportExportPyBytes() ([]byte, error) {
	return bindataRead(
		_exportExportPy,
		"export/export.py",
	)
}

func exportExportPy() (*asset, error) {
	bytes, err := exportExportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/export.py", size: 2261, mode: os.FileMode(493), modTime: time.Unix(1477926050, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcb\xc1\x4a\xc4\x30\x14\x85\xe1\x7d\x9e\xe2\xbc\x40\xa6\xa8\xe8\xe2\xee\xa4\x74\x21\x28\x23\x1d\x75\x3b\xa4\x69\xb4\x57\x27\xb9\x21\xb9\x1d\xec\xdb\x4b\xe9\x28\xb8\xfd\xcf\x77\x5c\xce\x27\xf6\x4e\x59\x52\x25\x63\x31\xcc\x7c\x1a\xb3\xf3\x5f\x84\x49\x35\x57\x6a\x9a\x0f\xd6\x69\x1e\x76\x5e\x62\xf3\xe9\xab\x17\x55\x66\x6e\xfc\xbb\xfd\xb3\x76\x1c\x6c\xf8\xce\x52\xd4\x00\x5e\x62\x74\x69\x24\xe4\x45\x27\x49\x37\xd8\x96\x5d\x5e\x0c\xc0\xa9\xaa\x4b\x3e\x54\xc2\x95\x01\x62\x88\x52\x16\xc2\xf5\xed\xdd\x93\x01\x92\x8b\x81\x2e\xde\x8e\xc3\x5a\xc4\x16\x99\x35\x10\xb4\xcc\xc1\x00\x35\x94\x33\xaf\x7f\x03\x58\xf4\xdd\xf3\xe3\x7d\xdb\x1d\x0f\xfb\xd7\xbe\xed\xfe\xa7\x97\x7d\xbf\x96\x90\xce\xab\x05\x36\x73\x3c\x74\xfd\xdb\x43\xdb\xd1\x2f\xdc\xf2\xa5\xfe\x04\x00\x00\xff\xff\x4b\x24\x96\x2d\x0e\x01\x00\x00")

func exportManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_exportManifestYml,
		"export/manifest.yml",
	)
}

func exportManifestYml() (*asset, error) {
	bytes, err := exportManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/manifest.yml", size: 270, mode: os.FileMode(420), modTime: time.Unix(1477925093, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"import/import.py": importImportPy,
	"import/manifest.yml": importManifestYml,
	"export/export.py": exportExportPy,
	"export/manifest.yml": exportManifestYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"export": &bintree{nil, map[string]*bintree{
		"export.py": &bintree{exportExportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{exportManifestYml, map[string]*bintree{}},
	}},
	"import": &bintree{nil, map[string]*bintree{
		"import.py": &bintree{importImportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{importManifestYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

